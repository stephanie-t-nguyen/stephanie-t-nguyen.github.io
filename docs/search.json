[
  {
    "objectID": "project_workshop.html",
    "href": "project_workshop.html",
    "title": "projects & workshops",
    "section": "",
    "text": "Nguyen_Stephanie_final_project.html\n\n\nDec 2, 2022\n\n\n\n\n\n\n\n\n\n\nhomework_4_code.docx\n\n\nMay 25, 2023\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stephanie Nguyen",
    "section": "",
    "text": "Hi there! I’m Stephanie. I am a current Environmental Studies and Biological Sciences double major at UCSB. Professionally, I help college students, especially first-gen students, navigate higher education. Outside fo work, I love cooking, playing tennis, and learning new languages!"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Stephanie Nguyen",
    "section": "Education",
    "text": "Education\nUniversity of California, Santa Barbara | Santa Barbara, CA\nB.St. in Environmental Studies, B.S. in Biological Sciences | Aug 2019 - Jun 2023"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Stephanie Nguyen",
    "section": "Experience",
    "text": "Experience\nCollege Chemistry Tutor | Campus Learning Assitance Services (CLAS) | Aug 2022 - Jun 2023\nPeer Mentor | ONDAS First-Gen Students Center | Aug 2020 - Jun 2023"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "Hello!\nI am a current UCSB Environmental Studies and Biological Sciences double major. I work as both as chemistry tutor and peer mentor at UCSB’s first-gen student center.\n\n\nCooking\nCooking is one of my favorite pass times. Food is not just a means of living, but it is integral to cultural, community, and relationships. I’m always looking to improve my cooking skills, but here are some of the dishes I am proudest of."
  },
  {
    "objectID": "project_workshop/ENVS 193SW Final/code/Nguyen_Stephanie_final_project.html",
    "href": "project_workshop/ENVS 193SW Final/code/Nguyen_Stephanie_final_project.html",
    "title": "Nguyen_Stephanie_final_project",
    "section": "",
    "text": "Step #2: Import water use data; clean data\nData Sources: Data on Country GDP are available from The World Bank (2000-2020). Data on country water access are avaliable from UNICEF (2000-2020).\n\n#Read data for country by continents \ncontinent <- gapminder |>                                                       #Load gapminder, gapminder is an R library\n  clean_names() |>                                                              #Clean column names\n  select(c(country_name = \"country\", \"continent\")) |>                           #Select wanted columns\n  distinct(.keep_all = TRUE)  |>                                                #Keep non-repeating columns\n  add_row(country_name = \"Moldova\", continent = \"Europe\") |>                    #Add missing country\n  add_row(country_name = \"Virgin Islands (U.S.)\", continent = \"Americas\") |>    #Add missing country\n  add_row(country_name = \"Laos\", continent = \"Asia\") |>                         #Add missing country\n  add_row(country_name = \"Kyrgyzstan\", continent = \"Asia\") |>                   #Add missing country\n  add_row(country_name = \"United Arab Emirates\", continent = \"Asia\") |>         #Add missing country\n  add_row(country_name = \"Vanuatu\", continent = \"Oceania\") |>                   #Add missing country\n  add_row(country_name = \"Uzbekistan\", continent = \"Asia\") |>                   #Add missing country\n  add_row(country_name = \"Ukraine\", continent = \"Europe\") |>                    #Add missing country\n  add_row(country_name = \"Tajikistan\", continent = \"Asia\") |>                   #Add missing country\n  add_row(country_name = \"Suriname\", continent = \"Americas\") |>                 #Add missing country\n  add_row(country_name = \"Tuvalu\", continent = \"Oceania\") |>                    #Add missing country\n  add_row(country_name = \"Bahamas\", continent = \"Americas\") |>                  #Add missing country\n  add_row(country_name = \"Turkmenistan\", continent = \"Asia\") |>                 #Add missing country\n  add_row(country_name = \"Tonga\", continent = \"Oceania\") |>                     #Add missing country\n  add_row(country_name = \"Timor-Leste\", continent = \"Asia\") |>                  #Add missing country\n  add_row(country_name = \"South Sudan\", continent = \"Africa\") |>                #Add missing country\n  add_row(country_name = \"Monaco\", continent = \"Europe\") |>                     #Add missing country\n  add_row(country_name = \"Armenia\", continent = \"Asia\") |>                      #Add missing country\n  add_row(country_name = \"Antigua and Barbuda\", continent = \"Americas\") |>      #Add missing country\n  add_row(country_name = \"Russia\", continent = \"Europe\") |>                     #Add missing country\n  mutate(country_name = str_replace_all(country_name, c(                        #Rename countries for consistency\n    \"Congo, Rep.\" = \"Congo\", \n    \"Czech Republic\" = \"Czechia\",\n    \"Korea, Rep.\" = \"South Korea\",\n    \"Hong Kong, China\" = \"Hong Kong\",\n    \"Slovak Republic\" = \"Slovakia\",\n    \"Swaziland\" = \"Eswatini\",\n    \"Yemen, Rep.\" = \"Yemen\"\n    ))) |>\n  filter(!country_name %in% c(\"Korea, Dem. Rep.\",                               #Filter out repeating columns\n                              \"Congo, Dem. Rep.\"))\n\n#Read data for country GDP per capita\nGDP <- read_excel(here(\"data/GDP_per_capita.xlsx\")) |>                          #Load GDP per capita data\n  clean_names() |>                                                              #Clean column names\n  subset(select = -c(series_code, country_code, x2021_yr2021)) |>               #Take out unnecessary columns\n  pivot_longer(cols = 3:23,                                                     #Pivot table longer for year column\n               names_to = \"year\",\n               values_to = \"GDP_per_capita_USD\") |> \n  mutate(year = str_sub(year, start = 2, end = -8)) |>                          #Clean year labels\n  mutate_at(vars(4),                                                            #Coerce data into numerics\n            as.numeric,\n            na.rm = TRUE) |>\n  slice(1:4557) |>                                                              #Remove non-country rows\n    mutate(country_name = str_replace_all(country_name, c(                      #Rename countries for consistency\n    \"Bahamas, The\" = \"Bahamas\",\n    \"Congo, Dem. Rep.\" = \"Congo\",\n    \"Egypt, Arab Rep.\" = \"Egypt\",\n    \"Gambia, The\" = \"Gambia\",\n    \"Hong Kong SAR, China\" = \"Hong Kong\",\n    \"Korea, Rep.\" = \"South Korea\",\n    \"Iran, Islamic Rep.\" = \"Iran\",\n    \"Lao PDR\" = \"Laos\",\n    \"Kyrgyz Republic\" = \"Kyrgyzstan\",\n    \"Russian Federation\" = \"Russia\",\n    \"Slovak Republic\" = \"Slovakia\",\n    \"Syrian Arab Republic\" = \"Syria\",\n    \"Turkiye\" = \"Turkey\",\n    \"Venezuela, RB\" = \"Venezuela\",\n    \"Yemen, Rep.\" = \"Yemen\"\n    ))) |> \n  filter(!country_name %in% c(\"Korea, Dem. People's Rep.\"))                     #Remove repeating country\n  \n#Read data for country population\npop <- read_excel(here(\"data/world_pop.xlsx\")) |>                               #Load population data\n  clean_names() |>                                                              #Clean column names\n  subset(select = -c(country_code, series_code)) |>                             #Take out unnecessary columns\n  pivot_longer(cols = 3:23,                                                     #Pivot table longer for years column\n               names_to = \"year\",\n               values_to = \"population\") |>\n  mutate(year = str_sub(year, start = 2, end = -8)) |>                          #Clean year labels\n  mutate_at(vars(4),                                                            #Coerce data into numerics\n            as.numeric, \n            na.rm = TRUE) |>\n  slice(1:5586) |>                                                              #Remove non-country rows\n    mutate(country_name = str_replace_all(country_name, c(                      #Rename countries for consistency\n    \"Bahamas, The\" = \"Bahamas\",\n    \"Congo, Dem. Rep.\" = \"Congo\",\n    \"Czech Republic\" = \"Czechia\",\n    \"Egypt, Arab Rep.\" = \"Egypt\",\n    \"Gambia, The\" = \"Gambia\",\n    \"Hong Kong SAR, China\" = \"Hong Kong\",\n    \"Korea, Rep.\" = \"South Korea\",\n    \"Iran, Islamic Rep.\" = \"Iran\",\n    \"Lao PDR\" = \"Laos\",\n    \"Kyrgyz Republic\" = \"Kyrgyzstan\",\n    \"Russian Federation\" = \"Russia\",\n    \"Slovak Republic\" = \"Slovakia\",\n    \"Syrian Arab Republic\" = \"Syria\",\n    \"Turkiye\" = \"Turkey\",\n    \"Venezuela, RB\" = \"Venezuela\",\n    \"Yemen, Rep.\" = \"Yemen\"\n    ))) |>\n  filter(!country_name %in% c(\"Korea, Dem. People's Rep.\"))                     #Remove repeating country\n  \n\n#Read data for country water access \nwater_access <- read_excel(here(\"data/drinking_water_access.xlsx\")) |>          #Load water access data\n  mutate_at(vars(5),                                                            #Coerce data into numeric\n            as.numeric,\n            na.rm = TRUE) |>\n  clean_names() |>                                                              #Clean column names\n  select(c(country_name = \"geographic_area\",                                    #Select relevant columns\n           \"indicator\", \n           year = \"time_period\", \n           percentage_w_wa = \"obs_value\")) |>\n  filter(indicator %in% c(                                                      #Define access to water\n    \"Proportion of population using at least basic drinking water services\"\n  )) |>\n  slice(1:5363) |>                                                              #Remove non-country rows\n  mutate(country_name = str_replace_all(country_name, c(                        #Rename countries for consistency\n    \"Democratic Republic of the Congo\" = \"Congo\",\n    \"Viet Nam\" = \"Vietnam\",\n    \"Democratic People's Republic of Korea\" = \"South Korea\",\n    \"China, Hong Kong Special Administrative Region\" = \"Hong Kong\",\n    \"Lao People's Democratic Republic\" = \"Laos\",\n    \"Republic of Moldova\" = \"Moldova\",\n    \"Russian Federation\" = \"Russia\",\n    \"Syrian Arab Republic\" = \"Syria\",\n    \"United Republic of Tanzania\" = \"Tanzania\",\n    \"The Republic of Turkey\" = \"Turkey\",\n    \"Venezuela (Bolivarian Republic of)\" = \"Venezuela\",\n    \"Virgin Islands U.S.\" = \"Virgin Islands (U.S.)\"))) \n\nQ1: What data are you using? I will be using data on countries’ water access and countries’ GDP.\nQ2: Where are the data from? The data on countries’ water access is from UNICEF, while the data on countries’ GDP and population are from The World Bank.\nQ3: Using these data, what figures will you make? My first plot will be a time series analysis of countries by their GDP and access to drinking water. Both data tables have data on countries from the years 1988 to 2017. My vision for the first plot is to graph “country GDP” by “proportion of population with access to basic drinking water” in a scatter plot, labeling each dot representing the country. For the time series aspect, I am hoping to make multiple plots to form an animation that shows how access to drinking water changes over the years along with a country’s GDP.\nQ4: What is the main point of each of your figures? The main point of my first figure is to observe if and how water access correlates to country GDP.\nQ5: Why did you choose the data that you chose? Why did you choose the topic that you choose? I chose data from UNICEF because it was readily available and easy to query. The UNICEF website had options for me to choose what definitions of “access to water” I wanted, as well as what countries and years I wanted data from. For data on countries’ wealth, I chose data from the World Bank because although other websites had data on countries’ GDP, The World Bank was the only one I found find that was not only downloadable onto Excel, but also had data on the countries’ GDP per capita throughout time. I chose this topic because I thought it would be interesting to see if GDP does correlate with improved water access, as people in nations often don’t gain access to the growing wealth of their countries.\nQ6: In what ways are you hoping this project challenges you? I am hoping this project challenges me to improve my debugging, documentation interpretation, and Google searching skills when it comes to coding. I foresee challenges in meshing my two data tables, since they are formatted very differently. I also foresee challenges with making the animation and graph aesthetically appealing when there are so many variables to depict.\n\n\nStep #3: Organize data for Plot 1: Drinking Water Access vs GDP per Capita\n\n#Find mismatched names that will affect inner join with data \nmismatch_names <- full_join(pop, GDP, by = c(\"country_name\", \"year\")) |>        #Full join pop and GDP\n  select(-c(\"series_name.x\", \"series_name.y\")) |>                               #Remove unnecessary columns\n  full_join(water_access, \n            by = c(\"year\", \"country_name\")) |>                                  #Full join data with water_access\n  select(-c(\"indicator\")) |>                                                    #Remove unnecessary column\n  full_join(continent,                                                          #Full join data with continent\n            by = c(\"country_name\")) |>\n  filter(!grepl(\"income|dividend|Europe|IDA|Saint|Asia|East|Sint Maarten|union|French|Island|Region|Samoa|Bonaire|mall\",  #Filter out rows containing common strings\n                country_name)) |> \n  filter(!country_name %in% c(\"Africa Western and Central\",                     #Filter out specific strings\n                              \"Arab World\",\n                              \"Andorra\",\n                              \"Anguilla\",\n                              \"Australia and New Zealand\",\n                              \"Congo, Rep.\",\n                              \"Euro area\",\n                              \"Fragile and conflict affected situations\",\n                              \"Guadeloupe\",\n                              \"Heavily indebted poor countries (HIPC)\",\n                              \"IBRD only\",\n                              \"Landlocked developing countries (LLDCs)\",\n                              \"Latin America & Caribbean\",\n                              \"Latin America & the Caribbean\",\n                              \"Latin America and Caribbean\",\n                              \"Least developed countries: UN classification\",\n                              \"Least developed countries\",\n                              \"Martinique\",\n                              \"Mayotte\",\n                              \"Montserrat\",\n                              \"Niue\",\n                              \"North America\",\n                              \"Not classified\",\n                              \"Oceania excluding Australia and New Zealand\",\n                              \"OECD members\",\n                              \"Republic of Korea\",\n                              \"San Marino\",\n                              \"SDG regions - Global\",\n                              \"Sub-Saharan Africa\",\n                              \"World\",\n                              \"Africa\",\n                              \"Americas\",\n                              \"Taiwan\",\n                              \"Tokelau\",\n                              \"Wallis and Futuna\",\n                              \"West and Central Africa\",\n                              \"West Bank and Gaza\",\n                              \"Western Pacific\")) \n\n#Find countries with full data for every year 2000-2020\nfull_country_data <- mismatch_names |>                                          #Load mismatch_names \n  na.omit() |>                                                                  #Omit rows with na\n  mutate_at(vars(2),                                                            #Coerce year into integer\n            as.integer,\n            na.rm = TRUE) |>\n  group_by(country_name) |>                                                     #Group by country name\n  summarize_at(1, sum, na.rm = TRUE) |>                                         #Sum up years\n  ungroup() |>                                                                  #Ungroup\n  filter(!year < 42210)                                                         #Select countries with complete data for all years \n\nfinal_df <- mismatch_names |>                                                   #Load mismatch_names\n  inner_join(full_country_data,                                                 #Inner join with countries with full data\n             by = \"country_name\") |>\n  select(c(country_name,                                                        #Select relevant columns\n           year = \"year.x\",\n           population,\n           GDP_per_capita_USD,\n           percentage_w_wa,\n           continent)) |>\n  mutate_at(vars(3:5),                                                          #Coerce data into numerics\n            as.numeric,\n            na.rm = TRUE) |>\n  mutate_at(vars(2),                                                            #Coerce year into integer\n            as.integer,\n            na.rm = TRUE)\n\n\n\nStep #4: Plot timeseries ggplot\n\nfinal <- ggplot() +                                                             #Create ggplot\n  \n  geom_point(                                                                   #Create point plot\n    data = final_df,                                                            #Load final_df\n    aes(x = GDP_per_capita_USD,                                                 #Set aesthetics\n    y = percentage_w_wa,\n    size = population/1000000,                                                  #Turn point into bubble plot\n    colour = continent),                                                        #Sort continents by color\n    alpha = 0.7) +                                                              #Make bubbles opaque\n  \n  transition_time(year) +                                                       #Change data by years\n  \n  scale_size(                                                                   #Edit population legend\n    range = c(2,20),                                                            #Set scale of bubble size\n    name = \"Population\",                                                        #Rename population legend\n    breaks = c(250, 500, 1000),                                                 #Change to 3 breaks\n    labels = c(\"250 million\", \"500 million\", \"1000 million\")) +                 #Add \"million\" to legend\n  \n  scale_colour_discrete(                                                        #Edit continent legend\n    \"Continents\") +                                                             #Capitalize continents\n\n  labs(                                                                         #Edit labels\n       title = \" Drinking Water Access vs GDP per Capita\",                      #Add title\n       subtitle = \"          Year: {frame_time}\",                               #Add subtitle\n       x = \"GDP per capita (US Dollars)\",                                       #Label x axis\n       y = \"Percentage of population with access to drinking water\",            #Label y axis\n       fill = \"\",\n       caption = \"Figure 1: Percentage of country population with access to drinking water by GDP per capita. Data from UNICEF and The World Bank.\") +\n  \n  theme_classic() +                                                             #Use classic theme\n  \n  theme(                                                                        #Edit plot theme\n        plot.title = element_text(hjust = 0, size = 30),       \n        plot.caption = element_text(color = \"black\", hjust = -0.05, \n                                    vjust = -1.3, size = 15),\n        plot.caption.position = \"plot\",\n        plot.subtitle = element_text(color = \"gray71\", hjust = -0.1,\n                                     size = 25, face = \"bold\"),\n        legend.position = \"right\",\n        legend.title = element_text(color = \"gray71\", size = 20),\n        legend.text = element_text(color = \"gray71\", size = 15),\n        axis.text = element_text(color = \"black\", size = 22),\n        axis.title.x = element_text(size = 15, vjust = -0.5, face = \"bold\"),\n        axis.title.y = element_text(size = 15, face = \"bold\"),\n        axis.ticks = element_blank(),\n        axis.line = element_line(linetype = \"solid\", color = \"lightgrey\"),\n        panel.grid.major = element_line(linetype = \"longdash\", color = \"lightgrey\")) +\n  \n  guides(color = guide_legend(override.aes = list(size = 7, shape = 15),        #Set size and shape of legend continent bubble\n                              color = \"lightgrey\")) +   \n        \n  scale_x_log10(                                                                #Make data more spread out via x axis\n        breaks = c(100, 300, 1000, 3000, 10000, 30000, 100000),                 #Evenly space ticks\n        labels = c(\"$100\", \"$300\", \"$1,000\", \"$3,000\", \"$10,000\",               #Add $ and commas to axis label\n                   \"$30,000\", \"$100,000\")) + \n  \n  scale_y_continuous(                                                           #Make continuous y axis\n    breaks = c(20, 40, 60, 80, 100),\n    labels = c(\"20%\", \"40%\", \"60%\", \"80%\", \"100%\")) \n\n\nanimate(                                                                        #Create animation\n        final, nframes = 90,                                                    #Set number of frames\n        renderer = gifski_renderer(\"GDP_water_access.gif\"),                     #Name gif\n        height = 780, width = 1000)                                             #Set dimensions\n\n\n\n\nQ1: What is the take home message of this figure? The take home message of this figure is that country GDP tends to be correlated with access to drinking water. The graph implies a positive relationship between country per capita wealth and the percentage of the population with drinking water.\nQ2: What is the most (or least) surprising? The most surprising thing to me was the wealth gap between countries. Initially, without the log scale, I could barely tell what was going on in the data; all the poor countries were clustered on the y axis, while the richer countries were clustered at the top of the graph. Another surprising observation was how the country’s continent appears to be highly associated with its assess to drinking water. Even for countries of similar GDP’s, African countries tend to have less access to drinking water than its Asian or American equivalent.\nQ3: What three new functions did you implement to support visualization of the data? Explain what each of them does. (1) I learned the scale_x_log10() function, which sets the x axis to a log scale instead of a continuous scale. This aided in the data visualization because the wealth gap between countries is so great that all the data would be clustered either on the y axis or the top of the graph if it was on a regular x axis. Thus, the log scale allows us to see the spread of the data better. (2) I also learned the animate() function, which allows you to make a gif of the plot, and the transition_time() function, that allowed me to animate the plot based on changing years, so you can see how countries’ access to drinking water and GDP change year by year. (3) In terms of data cleaning, the na.omit() function was useful in filtering out countries with missing data. If a country had missing data, it would appear and/or disappear at random points on the animation, so to avoid a visual confusing, I used na.omit() to take out countries with missing data. I also learned the distinct() function that allowed me to filter out repeating rows and the full_join() function that allowed me to join all the data together and see what rows had missing data at the bottom of the dataframe."
  }
]